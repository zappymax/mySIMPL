% CS 345 Assignment 2 Starter Code

% This code fully implements the expression and term parsing for
% mySIMPL. No modifications to the parse code itself should be necessary.
% It will also return to you an AST node for the expression. The only
% thing that might make this an issue is that you may not want to use
% the AST format provided. You are free to change it to your own
% implementation.
%
% If there are questions about this code, please feel free to ask
% the Dr. Rellermeyer or the TA.

% parse: note you will have to change this to have it work for general
% expressionrams; at the moment, it will only parse expressions and return to
% you an expression node in the AST variable
parse(TokenList, AST) :- phrase(prog(AST), TokenList).



% base: NOTE THIS IS INCOMPLETE; still need to have with ID and expression
% parsing
% This says to parse anything in the token list as long as that thing is
% a number (i.e. bind N to the token, but then check if it is a number
base(base(N)) --> [N], {number(N)}.

base(base(B)) --> {not(number(B))},
    %not(keywords(B),
    identifier(B).

base(base(B)) --> ['('],
	expression(B),
	[')'].



% simple case: just a term
expression(expression(T)) --> term(T).
% recursive case: expression then term. Since we can't do the following...
% expression --> expression ...
% due to left recursion, we have to build up the expression by parsing
% a term and passing this term along to the left_assoc call which
% will biuild the expression node for us
expression(E) --> term(T1), addOp(AO), left_assoc(E, expression(T1), AO).

% left assoc base case: there is only a term left, so we take what was
% already passed in with the newly parsed term and form the expression
% node
left_assoc(expression(T1, AO, T2), T1, AO) --> term(T2).
% left assoc recursive case; there is more than just a term left, so
% we must continue parsing using left_assoc
left_assoc(E, T1, AO) --> term(T2), addOp(AO2),
                          left_assoc(E, expression(T1, AO, T2), AO2).

% simple case: just a factor
term(term(F)) --> factor(F).
% recursive case: like the expression case, we can't have left-recursion
% so we build up the parse factor by factor
term(T) --> factor(F1), mulOp(MO), left_assoc_term(T, term(F1), MO).

% left assoc term base case
left_assoc_term(term(F1, MO, F2), F1, MO) --> factor(F2).
% left assoc term recursive case
left_assoc_term(T, F1, MO) --> factor(F2), mulOp(MO2),
                               left_assoc_term(T, term(F1, MO, F2), MO2).

% factor parse; a factor is merely a base
factor(factor(B)) --> base(B).

% parse add ops and mul ops; parses the operation, and unifies the
% passed in variable to an op node
addOp(addOp('+')) --> ['+'].
addOp(addOp('-')) --> ['-'].
mulOp(mulOp('*')) --> ['*'].
mulOp(mulOp('/')) --> ['/'].


% You need to finish adding the rest of the parsing rules.
% After that, you need to define evaluation rules that will take an AST and
% "run" your expressionram.

%keywords
keywords(+).
keywords(-).
keywords(*).
keywords(/).
keywords(<-).
keywords(;).
keywords(var).
keywords(return).


prog(prog(R)) --> retStatement(R),
    ['.'].

prog(prog(S,P)) --> declaration(S),
    [';'],
	prog(P).

prog(prog(S,P)) --> declAssignment(S),
    [';'],
    prog(P).

prog(prog(S,P)) --> assignment(S),
    [';'],
    prog(P).

retStatement(return(B)) --> ['return'],
    base(B).

declaration(declaration(ID)) --> ['var'],
    identifier(ID).

assignment(assignment(ID,B)) --> identifier(ID),
    ['<-'],
    base(B).

declAssignment(declAssignment(ID,B)) --> ['var'],
    identifier(ID),
    ['<-'],
    base(B).

identifier(identifier(ID)) --> [ID].

% Evaluation rules
evaluate(AST, Number):-
    empty_assoc(Var_list_in),
    evaluateProg(AST, Var_list_in, Var_list_out, Number).

evaluateProg(prog(return(R)), Var_list_in, Var_list_out, Number):-
    eval(R, Var_list_in, X),
    Number is X.

evaluateProg(prog(S,P), Var_list_in, Var_list_out, Number):-
    eval(S, Var_list_in, Var_list_out, Number),
    evaluateProg(P, Var_list_out, Var_list_temp, Number).


%rule for assignment
eval(assignment(identifier(ID), base(B)), Var_list_in, Var_list_out, Number):-
    %write('ID IS '),writeln(ID),
    %write('BASE IS '),writeln(B),
    eval(base(B), Var_list_in, RB),
    put_assoc(ID, Var_list_in, RB, Var_list_out).

%rule for declaration
eval(declaration(identifier(ID)), Var_list_in, Var_list_out, Number):-
    put_assoc(ID, Var_list_in, 'NULL', Var_list_out).

%rule for declaration assignment
eval(declAssignment(identifier(ID), base(B)), Var_list_in, Var_list_out, Number):-
    eval(base(B), Var_list_in, R),
    put_assoc(ID, Var_list_in, R, Var_list_out).

eval(base(B), Var_list_in, Ret):-
    number(B),
    %eval(B, Var_list_in, Ret).
    Ret is B.

eval(base(B), Var_list_in, Ret):-
    not(number(B)),
    eval(B, Var_list_in, Ret).
    %Ret is B.

eval(expression(A, addOp('+'),B), Var_list_in, Ret):-
    eval(A, Var_list_in, RA),
    eval(B, Var_list_in, RB),
    Ret is RA + RB.

eval(expression(A, addOp('-'),B), Var_list_in, Ret):-
    eval(A, Var_list_in, RA),
    eval(B, Var_list_in, RB),
    Ret is RA - RB.

eval(expression(T), Var_list_in, Ret):-
    eval(T, Var_list_in, RT),
    Ret is RT.

eval(term(F), Var_list_in, Ret):-
    eval(F,Var_list_in,RF),
    Ret is RF.

eval(factor(B), Var_list_in, Ret):-
    eval(B, Var_list_in, RB),
    Ret is RB.

eval(term(A, mulOp('/'), B), Var_list_in, Ret):-
    eval(A, Var_list_in, RA),
    eval(B,Var_list_in, RB),
    Ret is RA/RB.

eval(term(A, mulOp('*'), B), Var_list_in, Ret):-
    eval(A, Var_list_in, RA),
    eval(B,Var_list_in, RB),
    Ret is RA*RB.

eval(identifier(ID), Var_list_in, Ret):-
    get_assoc(ID, Var_list_in, Val),
    Ret is Val.

eval(factor(B), Var_list_in, Var_list_out, Number):-
    eval(B, Var_list_in, Var_list_out, R),
    Number is R.

eval(term(factor(F)), Var_list_in, Var_list_out, Number):-
     eval(F, Var_list_in, Var_list_out, R),
     Number is R.



%evalBase()


